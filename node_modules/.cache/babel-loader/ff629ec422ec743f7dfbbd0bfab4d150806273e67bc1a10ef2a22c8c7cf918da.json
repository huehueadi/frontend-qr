{"ast":null,"code":"var _jsxFileName = \"/Users/muskanagarwal/Desktop/qrfrontendmain-main/src/components/pages/Drap.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n\n// const Drap = () => {\n//   // State to hold user input for customization\n//   const [brandName, setBrandName] = useState(\"\");\n//   const [tagline, setTagline] = useState(\"\");\n//   const [heroHeadline, setHeroHeadline] = useState(\"\");\n//   const [heroDescription, setHeroDescription] = useState(\"\");\n//   const [ctaText, setCtaText] = useState(\"\");\n//   const [feature1Name, setFeature1Name] = useState(\"\");\n//   const [feature1Description, setFeature1Description] = useState(\"\");\n//   const [feature2Name, setFeature2Name] = useState(\"\");\n//   const [feature2Description, setFeature2Description] = useState(\"\");\n//   const [feature3Name, setFeature3Name] = useState(\"\");\n//   const [feature3Description, setFeature3Description] = useState(\"\");\n//   const [ctaHeadline, setCtaHeadline] = useState(\"\");\n//   const [ctaDescription, setCtaDescription] = useState(\"\");\n//   const [signupButtonText, setSignupButtonText] = useState(\"\");\n//   const [contactEmail, setContactEmail] = useState(\"\");\n//   const [bgColor, setBgColor] = useState(\"#f0f8ff\");\n//   const [textColor, setTextColor] = useState(\"#333\");\n//   const [customizedHtml, setCustomizedHtml] = useState(\"\");\n//   const [templateUrl, setTemplateUrl] = useState(\"\");\n//   const [isLoading, setIsLoading] = useState(false);  // Loading state\n//   const [error, setError] = useState(null);  // Error state\n\n//   // Fetch template URL from API when component mounts\n//   useEffect(() => {\n//     const fetchTemplateUrl = async () => {\n//       try {\n//         setIsLoading(true);  // Start loading\n//         const response = await fetch(\"http://localhost:7000/api/g\");\n//         const data = await response.json();\n\n//         if (data.success && data.files[0]?.fileUrl) {\n//           setTemplateUrl(data.files[0].fileUrl);  // Set the template URL from API\n//         } else {\n//           setError(\"Failed to fetch template URL.\");\n//         }\n//       } catch (error) {\n//         setError(\"Error fetching template URL.\");\n//       } finally {\n//         setIsLoading(false);  // End loading\n//       }\n//     };\n\n//     fetchTemplateUrl(); // Fetch the template URL when component mounts\n//   }, []);\n\n//   // Fetch the HTML template and replace placeholders\n//   const fetchAndCustomizeTemplate = async (event) => {\n//     event.preventDefault();\n\n//     if (!templateUrl) {\n//       console.error(\"Template URL is not available\");\n//       return;  // Don't proceed if templateUrl is not set\n//     }\n\n//     try {\n//       setIsLoading(true); // Start loading\n//       const response = await fetch(templateUrl);\n//       const template = await response.text();\n\n//       // Replace placeholders with user input\n//       const customizedTemplate = replacePlaceholders(template, {\n//         BRAND_NAME: brandName,\n//         TAGLINE: tagline,\n//         HERO_HEADLINE: heroHeadline,\n//         HERO_DESCRIPTION: heroDescription,\n//         CTA_TEXT: ctaText,\n//         FEATURE_1_NAME: feature1Name,\n//         FEATURE_1_DESCRIPTION: feature1Description,\n//         FEATURE_2_NAME: feature2Name,\n//         FEATURE_2_DESCRIPTION: feature2Description,\n//         FEATURE_3_NAME: feature3Name,\n//         FEATURE_3_DESCRIPTION: feature3Description,\n//         CTA_HEADLINE: ctaHeadline,\n//         CTA_DESCRIPTION: ctaDescription,\n//         SIGNUP_BUTTON_TEXT: signupButtonText,\n//         CONTACT_EMAIL: contactEmail,\n//         YEAR: new Date().getFullYear(),\n//         BACKGROUND_COLOR: bgColor,\n//         TEXT_COLOR: textColor\n//       });\n\n//       // Set the customized HTML to state\n//       setCustomizedHtml(customizedTemplate);\n//     } catch (error) {\n//       setError(\"Error fetching template from S3.\");\n//     } finally {\n//       setIsLoading(false); // End loading\n//     }\n//   };\n\n//   // Function to replace placeholders in the HTML template\n//   const replacePlaceholders = (htmlTemplate, userData) => {\n//     let customizedHtml = htmlTemplate;\n\n//     Object.keys(userData).forEach((key) => {\n//       const placeholder = `{${key}}`;  // Using curly braces for dynamic values\n//       const value = userData[key] || \"\";\n//       customizedHtml = customizedHtml.replace(new RegExp(placeholder, \"g\"), value);\n//     });\n\n//     return customizedHtml;\n//   };\n\n//   return (\n//     <div>\n//       <h1>Customize Your Landing Page</h1>\n\n//       {/* Error message if template URL or fetching fails */}\n//       {error && <div style={{ color: \"red\" }}>{error}</div>}\n\n//       {/* Loading state */}\n//       {isLoading && <div>Loading...</div>}\n\n//       {/* Form for user customization */}\n//       <form onSubmit={fetchAndCustomizeTemplate}>\n//         <div>\n//           <label htmlFor=\"brandName\">Brand Name:</label>\n//           <input\n//             type=\"text\"\n//             id=\"brandName\"\n//             value={brandName}\n//             onChange={(e) => setBrandName(e.target.value)}\n//             placeholder=\"Enter your brand name\"\n//             disabled={isLoading} // Disable inputs while loading\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"tagline\">Tagline:</label>\n//           <input\n//             type=\"text\"\n//             id=\"tagline\"\n//             value={tagline}\n//             onChange={(e) => setTagline(e.target.value)}\n//             placeholder=\"Enter your tagline\"\n//             disabled={isLoading} // Disable inputs while loading\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"heroHeadline\">Hero Headline:</label>\n//           <input\n//             type=\"text\"\n//             id=\"heroHeadline\"\n//             value={heroHeadline}\n//             onChange={(e) => setHeroHeadline(e.target.value)}\n//             placeholder=\"Enter the hero headline\"\n//             disabled={isLoading} // Disable inputs while loading\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"heroDescription\">Hero Description:</label>\n//           <input\n//             type=\"text\"\n//             id=\"heroDescription\"\n//             value={heroDescription}\n//             onChange={(e) => setHeroDescription(e.target.value)}\n//             placeholder=\"Enter the hero description\"\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"ctaText\">CTA Text:</label>\n//           <input\n//             type=\"text\"\n//             id=\"ctaText\"\n//             value={ctaText}\n//             onChange={(e) => setCtaText(e.target.value)}\n//             placeholder=\"Enter call-to-action text\"\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         {/* Feature Inputs */}\n//         <div>\n//           <label htmlFor=\"feature1Name\">Feature 1 Name:</label>\n//           <input\n//             type=\"text\"\n//             id=\"feature1Name\"\n//             value={feature1Name}\n//             onChange={(e) => setFeature1Name(e.target.value)}\n//             placeholder=\"Enter Feature 1 Name\"\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"feature1Description\">Feature 1 Description:</label>\n//           <input\n//             type=\"text\"\n//             id=\"feature1Description\"\n//             value={feature1Description}\n//             onChange={(e) => setFeature1Description(e.target.value)}\n//             placeholder=\"Enter Feature 1 Description\"\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         {/* Repeat for Feature 2 and Feature 3 */}\n\n//         <div>\n//           <label htmlFor=\"ctaHeadline\">CTA Headline:</label>\n//           <input\n//             type=\"text\"\n//             id=\"ctaHeadline\"\n//             value={ctaHeadline}\n//             onChange={(e) => setCtaHeadline(e.target.value)}\n//             placeholder=\"Enter CTA Headline\"\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"ctaDescription\">CTA Description:</label>\n//           <input\n//             type=\"text\"\n//             id=\"ctaDescription\"\n//             value={ctaDescription}\n//             onChange={(e) => setCtaDescription(e.target.value)}\n//             placeholder=\"Enter CTA Description\"\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"signupButtonText\">Signup Button Text:</label>\n//           <input\n//             type=\"text\"\n//             id=\"signupButtonText\"\n//             value={signupButtonText}\n//             onChange={(e) => setSignupButtonText(e.target.value)}\n//             placeholder=\"Enter Signup Button Text\"\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"contactEmail\">Contact Email:</label>\n//           <input\n//             type=\"email\"\n//             id=\"contactEmail\"\n//             value={contactEmail}\n//             onChange={(e) => setContactEmail(e.target.value)}\n//             placeholder=\"Enter Contact Email\"\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"bgColor\">Background Color:</label>\n//           <input\n//             type=\"color\"\n//             id=\"bgColor\"\n//             value={bgColor}\n//             onChange={(e) => setBgColor(e.target.value)}\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"textColor\">Text Color:</label>\n//           <input\n//             type=\"color\"\n//             id=\"textColor\"\n//             value={textColor}\n//             onChange={(e) => setTextColor(e.target.value)}\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         <button type=\"submit\" disabled={isLoading}>Generate Landing Page</button>\n//       </form>\n\n//       {/* Render the customized HTML if available */}\n//       <div\n//         id=\"template-container\"\n//         dangerouslySetInnerHTML={{ __html: customizedHtml }}\n//         style={{ marginTop: \"20px\", border: \"1px solid #ccc\", padding: \"20px\" }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default Drap;\n\nimport React from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Drap() {\n  _s();\n  const {\n    useState,\n    useEffect\n  } = React;\n  const [widgets, setWidgets] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    // Load page content from the backend when the app loads\n    async function loadPage() {\n      setIsLoading(true);\n      try {\n        const response = await fetch('http://localhost:7000/api/loadPage');\n        if (response.ok) {\n          const data = await response.json();\n          setWidgets(data.widgets || []);\n        } else {\n          console.error('Failed to load page content');\n        }\n      } catch (error) {\n        console.error('Error loading page:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    loadPage();\n  }, []);\n  const addWidget = widgetType => {\n    const widgetTemplates = {\n      'text-block': /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded-lg shadow\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold\",\n          children: \"Text Block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-700\",\n          children: \"This is a sample text block. You can edit this text to display your own content.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 19\n      }, this),\n      'social-icons': /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-4 rounded-lg shadow\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold\",\n          children: \"Social Media Icons\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex space-x-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fab fa-facebook text-blue-600 text-2xl\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fab fa-twitter text-blue-400 text-2xl\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fab fa-instagram text-pink-500 text-2xl\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 19\n      }, this)\n      // Add remaining widgets here...\n    };\n    setWidgets([...widgets, widgetTemplates[widgetType]]);\n  };\n  const savePage = async () => {\n    try {\n      const pageContent = document.getElementById('mobile-preview').innerHTML;\n      const response = await fetch('/api/savePage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          widgets,\n          pageContent\n        })\n      });\n      if (response.ok) {\n        alert('Page saved successfully!');\n      } else {\n        alert('Failed to save the page.');\n      }\n    } catch (error) {\n      console.error('Error saving page:', error);\n      alert('An error occurred while saving.');\n    }\n  };\n  const publishPage = async () => {\n    try {\n      const pageContent = document.getElementById('mobile-preview').innerHTML;\n      const response = await fetch('/api/publishPage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          widgets,\n          pageContent\n        })\n      });\n      if (response.ok) {\n        alert('Page published successfully!');\n      } else {\n        alert('Failed to publish the page.');\n      }\n    } catch (error) {\n      console.error('Error publishing page:', error);\n      alert('An error occurred while publishing.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex h-screen\",\n    children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full flex justify-center items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-1/2 bg-gray-50 p-6 overflow-y-scroll\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-bold mb-4\",\n          children: \"Widget Library\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"flex items-center space-x-2\",\n            onClick: () => addWidget('text-block'),\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-font text-xl\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Text Block\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"flex items-center space-x-2\",\n            onClick: () => addWidget('social-icons'),\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-share-alt text-xl\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Social Media Icons\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-500 text-white py-2 px-4 rounded-lg\",\n            onClick: savePage,\n            children: \"Save Page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-green-500 text-white py-2 px-4 rounded-lg ml-2\",\n            onClick: publishPage,\n            children: \"Publish Page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-1/2 flex justify-center items-center bg-white shadow-lg\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"mobile-preview\",\n          className: \"w-80 h-full bg-gray-200 rounded-lg shadow-inner overflow-y-scroll p-4\",\n          children: widgets.map((widget, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: widget\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 41\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 393,\n    columnNumber: 5\n  }, this);\n}\n_s(Drap, \"CxXtCe8wSmT1Pt9UON3eiOcBcAo=\");\n_c = Drap;\nexport default Drap;\nvar _c;\n$RefreshReg$(_c, \"Drap\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","Drap","_s","useState","useEffect","widgets","setWidgets","isLoading","setIsLoading","loadPage","response","fetch","ok","data","json","console","error","addWidget","widgetType","widgetTemplates","className","children","fileName","_jsxFileName","lineNumber","columnNumber","savePage","pageContent","document","getElementById","innerHTML","method","headers","body","JSON","stringify","alert","publishPage","onClick","id","map","widget","index","_c","$RefreshReg$"],"sources":["/Users/muskanagarwal/Desktop/qrfrontendmain-main/src/components/pages/Drap.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n\n// const Drap = () => {\n//   // State to hold user input for customization\n//   const [brandName, setBrandName] = useState(\"\");\n//   const [tagline, setTagline] = useState(\"\");\n//   const [heroHeadline, setHeroHeadline] = useState(\"\");\n//   const [heroDescription, setHeroDescription] = useState(\"\");\n//   const [ctaText, setCtaText] = useState(\"\");\n//   const [feature1Name, setFeature1Name] = useState(\"\");\n//   const [feature1Description, setFeature1Description] = useState(\"\");\n//   const [feature2Name, setFeature2Name] = useState(\"\");\n//   const [feature2Description, setFeature2Description] = useState(\"\");\n//   const [feature3Name, setFeature3Name] = useState(\"\");\n//   const [feature3Description, setFeature3Description] = useState(\"\");\n//   const [ctaHeadline, setCtaHeadline] = useState(\"\");\n//   const [ctaDescription, setCtaDescription] = useState(\"\");\n//   const [signupButtonText, setSignupButtonText] = useState(\"\");\n//   const [contactEmail, setContactEmail] = useState(\"\");\n//   const [bgColor, setBgColor] = useState(\"#f0f8ff\");\n//   const [textColor, setTextColor] = useState(\"#333\");\n//   const [customizedHtml, setCustomizedHtml] = useState(\"\");\n//   const [templateUrl, setTemplateUrl] = useState(\"\");\n//   const [isLoading, setIsLoading] = useState(false);  // Loading state\n//   const [error, setError] = useState(null);  // Error state\n\n//   // Fetch template URL from API when component mounts\n//   useEffect(() => {\n//     const fetchTemplateUrl = async () => {\n//       try {\n//         setIsLoading(true);  // Start loading\n//         const response = await fetch(\"http://localhost:7000/api/g\");\n//         const data = await response.json();\n\n//         if (data.success && data.files[0]?.fileUrl) {\n//           setTemplateUrl(data.files[0].fileUrl);  // Set the template URL from API\n//         } else {\n//           setError(\"Failed to fetch template URL.\");\n//         }\n//       } catch (error) {\n//         setError(\"Error fetching template URL.\");\n//       } finally {\n//         setIsLoading(false);  // End loading\n//       }\n//     };\n\n//     fetchTemplateUrl(); // Fetch the template URL when component mounts\n//   }, []);\n\n//   // Fetch the HTML template and replace placeholders\n//   const fetchAndCustomizeTemplate = async (event) => {\n//     event.preventDefault();\n\n//     if (!templateUrl) {\n//       console.error(\"Template URL is not available\");\n//       return;  // Don't proceed if templateUrl is not set\n//     }\n\n//     try {\n//       setIsLoading(true); // Start loading\n//       const response = await fetch(templateUrl);\n//       const template = await response.text();\n\n//       // Replace placeholders with user input\n//       const customizedTemplate = replacePlaceholders(template, {\n//         BRAND_NAME: brandName,\n//         TAGLINE: tagline,\n//         HERO_HEADLINE: heroHeadline,\n//         HERO_DESCRIPTION: heroDescription,\n//         CTA_TEXT: ctaText,\n//         FEATURE_1_NAME: feature1Name,\n//         FEATURE_1_DESCRIPTION: feature1Description,\n//         FEATURE_2_NAME: feature2Name,\n//         FEATURE_2_DESCRIPTION: feature2Description,\n//         FEATURE_3_NAME: feature3Name,\n//         FEATURE_3_DESCRIPTION: feature3Description,\n//         CTA_HEADLINE: ctaHeadline,\n//         CTA_DESCRIPTION: ctaDescription,\n//         SIGNUP_BUTTON_TEXT: signupButtonText,\n//         CONTACT_EMAIL: contactEmail,\n//         YEAR: new Date().getFullYear(),\n//         BACKGROUND_COLOR: bgColor,\n//         TEXT_COLOR: textColor\n//       });\n\n//       // Set the customized HTML to state\n//       setCustomizedHtml(customizedTemplate);\n//     } catch (error) {\n//       setError(\"Error fetching template from S3.\");\n//     } finally {\n//       setIsLoading(false); // End loading\n//     }\n//   };\n\n//   // Function to replace placeholders in the HTML template\n//   const replacePlaceholders = (htmlTemplate, userData) => {\n//     let customizedHtml = htmlTemplate;\n\n//     Object.keys(userData).forEach((key) => {\n//       const placeholder = `{${key}}`;  // Using curly braces for dynamic values\n//       const value = userData[key] || \"\";\n//       customizedHtml = customizedHtml.replace(new RegExp(placeholder, \"g\"), value);\n//     });\n\n//     return customizedHtml;\n//   };\n\n//   return (\n//     <div>\n//       <h1>Customize Your Landing Page</h1>\n\n//       {/* Error message if template URL or fetching fails */}\n//       {error && <div style={{ color: \"red\" }}>{error}</div>}\n\n//       {/* Loading state */}\n//       {isLoading && <div>Loading...</div>}\n\n//       {/* Form for user customization */}\n//       <form onSubmit={fetchAndCustomizeTemplate}>\n//         <div>\n//           <label htmlFor=\"brandName\">Brand Name:</label>\n//           <input\n//             type=\"text\"\n//             id=\"brandName\"\n//             value={brandName}\n//             onChange={(e) => setBrandName(e.target.value)}\n//             placeholder=\"Enter your brand name\"\n//             disabled={isLoading} // Disable inputs while loading\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"tagline\">Tagline:</label>\n//           <input\n//             type=\"text\"\n//             id=\"tagline\"\n//             value={tagline}\n//             onChange={(e) => setTagline(e.target.value)}\n//             placeholder=\"Enter your tagline\"\n//             disabled={isLoading} // Disable inputs while loading\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"heroHeadline\">Hero Headline:</label>\n//           <input\n//             type=\"text\"\n//             id=\"heroHeadline\"\n//             value={heroHeadline}\n//             onChange={(e) => setHeroHeadline(e.target.value)}\n//             placeholder=\"Enter the hero headline\"\n//             disabled={isLoading} // Disable inputs while loading\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"heroDescription\">Hero Description:</label>\n//           <input\n//             type=\"text\"\n//             id=\"heroDescription\"\n//             value={heroDescription}\n//             onChange={(e) => setHeroDescription(e.target.value)}\n//             placeholder=\"Enter the hero description\"\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"ctaText\">CTA Text:</label>\n//           <input\n//             type=\"text\"\n//             id=\"ctaText\"\n//             value={ctaText}\n//             onChange={(e) => setCtaText(e.target.value)}\n//             placeholder=\"Enter call-to-action text\"\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         {/* Feature Inputs */}\n//         <div>\n//           <label htmlFor=\"feature1Name\">Feature 1 Name:</label>\n//           <input\n//             type=\"text\"\n//             id=\"feature1Name\"\n//             value={feature1Name}\n//             onChange={(e) => setFeature1Name(e.target.value)}\n//             placeholder=\"Enter Feature 1 Name\"\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"feature1Description\">Feature 1 Description:</label>\n//           <input\n//             type=\"text\"\n//             id=\"feature1Description\"\n//             value={feature1Description}\n//             onChange={(e) => setFeature1Description(e.target.value)}\n//             placeholder=\"Enter Feature 1 Description\"\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         {/* Repeat for Feature 2 and Feature 3 */}\n\n//         <div>\n//           <label htmlFor=\"ctaHeadline\">CTA Headline:</label>\n//           <input\n//             type=\"text\"\n//             id=\"ctaHeadline\"\n//             value={ctaHeadline}\n//             onChange={(e) => setCtaHeadline(e.target.value)}\n//             placeholder=\"Enter CTA Headline\"\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"ctaDescription\">CTA Description:</label>\n//           <input\n//             type=\"text\"\n//             id=\"ctaDescription\"\n//             value={ctaDescription}\n//             onChange={(e) => setCtaDescription(e.target.value)}\n//             placeholder=\"Enter CTA Description\"\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"signupButtonText\">Signup Button Text:</label>\n//           <input\n//             type=\"text\"\n//             id=\"signupButtonText\"\n//             value={signupButtonText}\n//             onChange={(e) => setSignupButtonText(e.target.value)}\n//             placeholder=\"Enter Signup Button Text\"\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"contactEmail\">Contact Email:</label>\n//           <input\n//             type=\"email\"\n//             id=\"contactEmail\"\n//             value={contactEmail}\n//             onChange={(e) => setContactEmail(e.target.value)}\n//             placeholder=\"Enter Contact Email\"\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"bgColor\">Background Color:</label>\n//           <input\n//             type=\"color\"\n//             id=\"bgColor\"\n//             value={bgColor}\n//             onChange={(e) => setBgColor(e.target.value)}\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         <div>\n//           <label htmlFor=\"textColor\">Text Color:</label>\n//           <input\n//             type=\"color\"\n//             id=\"textColor\"\n//             value={textColor}\n//             onChange={(e) => setTextColor(e.target.value)}\n//             disabled={isLoading}\n//           />\n//         </div>\n\n//         <button type=\"submit\" disabled={isLoading}>Generate Landing Page</button>\n//       </form>\n\n//       {/* Render the customized HTML if available */}\n//       <div\n//         id=\"template-container\"\n//         dangerouslySetInnerHTML={{ __html: customizedHtml }}\n//         style={{ marginTop: \"20px\", border: \"1px solid #ccc\", padding: \"20px\" }}\n//       />\n//     </div>\n//   );\n// };\n\n// export default Drap;\n\n\n\n\nimport React from 'react'\n\nfunction Drap() {\n\n  const { useState, useEffect } = React;\n\n  \n      const [widgets, setWidgets] = useState([]);\n      const [isLoading, setIsLoading] = useState(false);\n\n      useEffect(() => {\n          // Load page content from the backend when the app loads\n          async function loadPage() {\n              setIsLoading(true);\n              try {\n                  const response = await fetch('http://localhost:7000/api/loadPage');\n                  if (response.ok) {\n                      const data = await response.json();\n                      setWidgets(data.widgets || []);\n                  } else {\n                      console.error('Failed to load page content');\n                  }\n              } catch (error) {\n                  console.error('Error loading page:', error);\n              } finally {\n                  setIsLoading(false);\n              }\n          }\n          loadPage();\n      }, []);\n\n      const addWidget = (widgetType) => {\n          const widgetTemplates = {\n              'text-block': (\n                  <div className=\"bg-white p-4 rounded-lg shadow\">\n                      <h3 className=\"text-lg font-semibold\">Text Block</h3>\n                      <p className=\"text-gray-700\">This is a sample text block. You can edit this text to display your own content.</p>\n                  </div>\n              ),\n              'social-icons': (\n                  <div className=\"bg-white p-4 rounded-lg shadow\">\n                      <h3 className=\"text-lg font-semibold\">Social Media Icons</h3>\n                      <div className=\"flex space-x-4\">\n                          <i className=\"fab fa-facebook text-blue-600 text-2xl\"></i>\n                          <i className=\"fab fa-twitter text-blue-400 text-2xl\"></i>\n                          <i className=\"fab fa-instagram text-pink-500 text-2xl\"></i>\n                      </div>\n                  </div>\n              ),\n              // Add remaining widgets here...\n          };\n          setWidgets([...widgets, widgetTemplates[widgetType]]);\n      };\n\n      const savePage = async () => {\n          try {\n              const pageContent = document.getElementById('mobile-preview').innerHTML;\n              const response = await fetch('/api/savePage', {\n                  method: 'POST',\n                  headers: {\n                      'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ widgets, pageContent }),\n              });\n\n              if (response.ok) {\n                  alert('Page saved successfully!');\n              } else {\n                  alert('Failed to save the page.');\n              }\n          } catch (error) {\n              console.error('Error saving page:', error);\n              alert('An error occurred while saving.');\n          }\n      };\n\n      const publishPage = async () => {\n          try {\n              const pageContent = document.getElementById('mobile-preview').innerHTML;\n              const response = await fetch('/api/publishPage', {\n                  method: 'POST',\n                  headers: {\n                      'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify({ widgets, pageContent }),\n              });\n\n              if (response.ok) {\n                  alert('Page published successfully!');\n              } else {\n                  alert('Failed to publish the page.');\n              }\n          } catch (error) {\n              console.error('Error publishing page:', error);\n              alert('An error occurred while publishing.');\n          }\n      };\n  return (\n    <div className=\"flex h-screen\">\n                    {isLoading ? (\n                        <div className=\"w-full flex justify-center items-center\">\n                            <h2 className=\"text-xl font-bold\">Loading...</h2>\n                        </div>\n                    ) : (\n                        <>\n                            <div className=\"w-1/2 bg-gray-50 p-6 overflow-y-scroll\">\n                                <h2 className=\"text-2xl font-bold mb-4\">Widget Library</h2>\n                                <div className=\"space-y-4\">\n                                    <button className=\"flex items-center space-x-2\" onClick={() => addWidget('text-block')}>\n                                        <i className=\"fas fa-font text-xl\"></i>\n                                        <span>Text Block</span>\n                                    </button>\n                                    <button className=\"flex items-center space-x-2\" onClick={() => addWidget('social-icons')}>\n                                        <i className=\"fas fa-share-alt text-xl\"></i>\n                                        <span>Social Media Icons</span>\n                                    </button>\n                                    {/* Add other widget buttons here */}\n                                </div>\n                                <div className=\"mt-6\">\n                                    <button className=\"bg-blue-500 text-white py-2 px-4 rounded-lg\" onClick={savePage}>\n                                        Save Page\n                                    </button>\n                                    <button className=\"bg-green-500 text-white py-2 px-4 rounded-lg ml-2\" onClick={publishPage}>\n                                        Publish Page\n                                    </button>\n                                </div>\n                            </div>\n                            <div className=\"w-1/2 flex justify-center items-center bg-white shadow-lg\">\n                                <div id=\"mobile-preview\" className=\"w-80 h-full bg-gray-200 rounded-lg shadow-inner overflow-y-scroll p-4\">\n                                    {widgets.map((widget, index) => (\n                                        <div key={index}>{widget}</div>\n                                    ))}\n                                </div>\n                            </div>\n                        </>\n                    )}\n                </div>\n            );\n        \n\n  \n}\n\nexport default Drap\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}